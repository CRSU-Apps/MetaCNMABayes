// Generated by rstantools.  Do not edit by hand.

/*
    MetaCNMABayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MetaCNMABayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MetaCNMABayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_binary_re_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 74> locations_array__ =
  {" (found before start of program)",
  " (in 'binary_re', line 16, column 2 to column 23)",
  " (in 'binary_re', line 17, column 2 to column 30)",
  " (in 'binary_re', line 19, column 2 to column 31)",
  " (in 'binary_re', line 20, column 2 to column 39)",
  " (in 'binary_re', line 23, column 2 to column 35)",
  " (in 'binary_re', line 24, column 2 to column 36)",
  " (in 'binary_re', line 25, column 2 to column 36)",
  " (in 'binary_re', line 26, column 2 to column 38)",
  " (in 'binary_re', line 27, column 2 to column 41)",
  " (in 'binary_re', line 29, column 4 to column 16)",
  " (in 'binary_re', line 30, column 4 to column 22)",
  " (in 'binary_re', line 31, column 4 to column 16)",
  " (in 'binary_re', line 32, column 4 to column 16)",
  " (in 'binary_re', line 33, column 4 to column 18)",
  " (in 'binary_re', line 35, column 6 to column 39)",
  " (in 'binary_re', line 36, column 6 to column 98)",
  " (in 'binary_re', line 37, column 6 to column 40)",
  " (in 'binary_re', line 38, column 6 to column 96)",
  " (in 'binary_re', line 39, column 6 to column 32)",
  " (in 'binary_re', line 34, column 27 to line 40, column 5)",
  " (in 'binary_re', line 34, column 4 to line 40, column 5)",
  " (in 'binary_re', line 42, column 6 to column 17)",
  " (in 'binary_re', line 43, column 6 to column 18)",
  " (in 'binary_re', line 44, column 6 to column 18)",
  " (in 'binary_re', line 45, column 6 to column 20)",
  " (in 'binary_re', line 46, column 6 to column 23)",
  " (in 'binary_re', line 41, column 41 to line 47, column 5)",
  " (in 'binary_re', line 41, column 4 to line 47, column 5)",
  " (in 'binary_re', line 28, column 24 to line 48, column 3)",
  " (in 'binary_re', line 28, column 2 to line 48, column 3)",
  " (in 'binary_re', line 52, column 25 to column 33)",
  " (in 'binary_re', line 52, column 10 to column 21)",
  " (in 'binary_re', line 52, column 2 to column 35)",
  " (in 'binary_re', line 53, column 2 to column 23)",
  " (in 'binary_re', line 55, column 4 to column 28)",
  " (in 'binary_re', line 56, column 4 to column 31)",
  " (in 'binary_re', line 58, column 6 to column 46)",
  " (in 'binary_re', line 57, column 27 to line 59, column 5)",
  " (in 'binary_re', line 57, column 4 to line 59, column 5)",
  " (in 'binary_re', line 61, column 6 to column 37)",
  " (in 'binary_re', line 62, column 6 to column 46)",
  " (in 'binary_re', line 60, column 26 to line 63, column 5)",
  " (in 'binary_re', line 60, column 4 to line 63, column 5)",
  " (in 'binary_re', line 54, column 24 to line 65, column 3)",
  " (in 'binary_re', line 54, column 2 to line 65, column 3)",
  " (in 'binary_re', line 3, column 2 to column 15)",
  " (in 'binary_re', line 5, column 13 to column 21)",
  " (in 'binary_re', line 5, column 2 to column 23)",
  " (in 'binary_re', line 7, column 2 to column 19)",
  " (in 'binary_re', line 9, column 8 to column 16)",
  " (in 'binary_re', line 9, column 18 to column 29)",
  " (in 'binary_re', line 9, column 2 to column 31)",
  " (in 'binary_re', line 11, column 8 to column 16)",
  " (in 'binary_re', line 11, column 18 to column 29)",
  " (in 'binary_re', line 11, column 2 to column 31)",
  " (in 'binary_re', line 13, column 18 to column 30)",
  " (in 'binary_re', line 13, column 32 to column 40)",
  " (in 'binary_re', line 13, column 42 to column 53)",
  " (in 'binary_re', line 13, column 2 to column 55)",
  " (in 'binary_re', line 16, column 10 to column 18)",
  " (in 'binary_re', line 17, column 14 to column 26)",
  " (in 'binary_re', line 20, column 29 to column 37)",
  " (in 'binary_re', line 20, column 10 to column 21)",
  " (in 'binary_re', line 23, column 25 to column 33)",
  " (in 'binary_re', line 23, column 10 to column 21)",
  " (in 'binary_re', line 24, column 26 to column 34)",
  " (in 'binary_re', line 24, column 10 to column 21)",
  " (in 'binary_re', line 25, column 26 to column 34)",
  " (in 'binary_re', line 25, column 10 to column 21)",
  " (in 'binary_re', line 26, column 28 to column 36)",
  " (in 'binary_re', line 26, column 10 to column 21)",
  " (in 'binary_re', line 27, column 31 to column 39)",
  " (in 'binary_re', line 27, column 10 to column 21)"};
#include <stan_meta_header.hpp>
class model_binary_re final : public model_base_crtp<model_binary_re> {
private:
  int n_trials;
  std::vector<int> n_arms;
  int n_components;
  std::vector<std::vector<int>> n;
  std::vector<std::vector<int>> r;
  std::vector<std::vector<std::vector<double>>> components;
  int delta_2dim__;
  int w_2dim__;
  int sw_2dim__;
  int md_2dim__;
  int taud_2dim__;
  int r_delta_2dim__;
public:
  ~model_binary_re() {}
  model_binary_re(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_binary_re_namespace::model_binary_re";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 46;
      context__.validate_dims("data initialization", "n_trials", "int",
        std::vector<size_t>{});
      n_trials = std::numeric_limits<int>::min();
      current_statement__ = 46;
      n_trials = context__.vals_i("n_trials")[(1 - 1)];
      current_statement__ = 47;
      stan::math::validate_non_negative_index("n_arms", "n_trials", n_trials);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "n_arms", "int",
        std::vector<size_t>{static_cast<size_t>(n_trials)});
      n_arms = std::vector<int>(n_trials, std::numeric_limits<int>::min());
      current_statement__ = 48;
      n_arms = context__.vals_i("n_arms");
      current_statement__ = 49;
      context__.validate_dims("data initialization", "n_components", "int",
        std::vector<size_t>{});
      n_components = std::numeric_limits<int>::min();
      current_statement__ = 49;
      n_components = context__.vals_i("n_components")[(1 - 1)];
      current_statement__ = 50;
      stan::math::validate_non_negative_index("n", "n_trials", n_trials);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("n", "max(n_arms)",
        stan::math::max(n_arms));
      current_statement__ = 52;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{static_cast<size_t>(n_trials),
          static_cast<size_t>(stan::math::max(n_arms))});
      n = std::vector<std::vector<int>>(n_trials,
            std::vector<int>(stan::math::max(n_arms),
              std::numeric_limits<int>::min()));
      {
        std::vector<int> n_flat__;
        current_statement__ = 52;
        n_flat__ = context__.vals_i("n");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= stan::math::max(n_arms); ++sym1__) {
          current_statement__ = 52;
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            current_statement__ = 52;
            stan::model::assign(n, n_flat__[(pos__ - 1)],
              "assigning variable n", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 52;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("r", "n_trials", n_trials);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("r", "max(n_arms)",
        stan::math::max(n_arms));
      current_statement__ = 55;
      context__.validate_dims("data initialization", "r", "int",
        std::vector<size_t>{static_cast<size_t>(n_trials),
          static_cast<size_t>(stan::math::max(n_arms))});
      r = std::vector<std::vector<int>>(n_trials,
            std::vector<int>(stan::math::max(n_arms),
              std::numeric_limits<int>::min()));
      {
        std::vector<int> r_flat__;
        current_statement__ = 55;
        r_flat__ = context__.vals_i("r");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= stan::math::max(n_arms); ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            current_statement__ = 55;
            stan::model::assign(r, r_flat__[(pos__ - 1)],
              "assigning variable r", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 55;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      stan::math::validate_non_negative_index("components", "n_components",
        n_components);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("components", "n_trials",
        n_trials);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("components", "max(n_arms)",
        stan::math::max(n_arms));
      current_statement__ = 59;
      context__.validate_dims("data initialization", "components", "double",
        std::vector<size_t>{static_cast<size_t>(n_components),
          static_cast<size_t>(n_trials),
          static_cast<size_t>(stan::math::max(n_arms))});
      components = std::vector<std::vector<std::vector<double>>>(n_components,
                     std::vector<std::vector<double>>(n_trials,
                       std::vector<double>(stan::math::max(n_arms),
                         std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> components_flat__;
        current_statement__ = 59;
        components_flat__ = context__.vals_r("components");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= stan::math::max(n_arms); ++sym1__) {
          current_statement__ = 59;
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            current_statement__ = 59;
            for (int sym3__ = 1; sym3__ <= n_components; ++sym3__) {
              current_statement__ = 59;
              stan::model::assign(components, components_flat__[(pos__ - 1)],
                "assigning variable components",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 59;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 60;
      stan::math::validate_non_negative_index("mu", "n_trials", n_trials);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("d", "n_components",
        n_components);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("delta", "n_trials", n_trials);
      current_statement__ = 63;
      delta_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 63;
      delta_2dim__ = stan::math::max(n_arms);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("delta", "max(n_arms)",
        delta_2dim__);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("w", "n_trials", n_trials);
      current_statement__ = 65;
      w_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 65;
      w_2dim__ = stan::math::max(n_arms);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("w", "max(n_arms)", w_2dim__);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("sw", "n_trials", n_trials);
      current_statement__ = 67;
      sw_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 67;
      sw_2dim__ = stan::math::max(n_arms);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("sw", "max(n_arms)", sw_2dim__);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("md", "n_trials", n_trials);
      current_statement__ = 69;
      md_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 69;
      md_2dim__ = stan::math::max(n_arms);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("md", "max(n_arms)", md_2dim__);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("taud", "n_trials", n_trials);
      current_statement__ = 71;
      taud_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 71;
      taud_2dim__ = stan::math::max(n_arms);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("taud", "max(n_arms)",
        taud_2dim__);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("r_delta", "n_trials", n_trials);
      current_statement__ = 73;
      r_delta_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 73;
      r_delta_2dim__ = stan::math::max(n_arms);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("r_delta", "max(n_arms)",
        r_delta_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_trials + n_components + 1 + (n_trials * delta_2dim__);
  }
  inline std::string model_name() const final {
    return "model_binary_re";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_binary_re_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_trials, DUMMY_VAR__);
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials);
      Eigen::Matrix<local_scalar_t__,1,-1> d =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(n_components,
          DUMMY_VAR__);
      current_statement__ = 2;
      d = in__.template read<
            Eigen::Matrix<local_scalar_t__,1,-1>>(n_components);
      local_scalar_t__ sdbt = DUMMY_VAR__;
      current_statement__ = 3;
      sdbt = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 10, lp__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delta_2dim__,
            DUMMY_VAR__));
      current_statement__ = 4;
      delta = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(n_trials,
                delta_2dim__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> w =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(w_2dim__,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> sw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sw_2dim__,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> md =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(md_2dim__,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> taud =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(taud_2dim__,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> r_delta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_delta_2dim__,
            DUMMY_VAR__));
      current_statement__ = 30;
      for (int i = 1; i <= n_trials; ++i) {
        current_statement__ = 10;
        stan::model::assign(w, 0, "assigning variable w",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 11;
        stan::model::assign(r_delta, 0, "assigning variable r_delta",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 12;
        stan::model::assign(sw, 0, "assigning variable sw",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 13;
        stan::model::assign(md, 0, "assigning variable md",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 14;
        stan::model::assign(taud, 0, "assigning variable taud",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 21;
        for (int k = 2; k <=
             stan::model::rvalue(n_arms, "n_arms", stan::model::index_uni(i)); ++k) {
          current_statement__ = 15;
          stan::model::assign(taud, (((sdbt * 2) * (k - 1)) / k),
            "assigning variable taud", stan::model::index_uni(i),
            stan::model::index_uni(k));
          current_statement__ = 16;
          stan::model::assign(w,
            ((stan::model::rvalue(delta, "delta", stan::model::index_uni(i),
                stan::model::index_uni(k)) -
            stan::math::multiply(d,
              stan::math::to_vector(
                stan::model::rvalue(components, "components",
                  stan::model::index_omni(), stan::model::index_uni(i),
                  stan::model::index_uni(k))))) +
            stan::math::multiply(d,
              stan::math::to_vector(
                stan::model::rvalue(components, "components",
                  stan::model::index_omni(), stan::model::index_uni(i),
                  stan::model::index_uni(1))))), "assigning variable w",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 17;
          stan::model::assign(sw,
            (stan::math::sum(
               stan::model::rvalue(w, "w", stan::model::index_uni(i),
                 stan::model::index_min_max(1, (k - 1)))) / (k - 1)),
            "assigning variable sw", stan::model::index_uni(i),
            stan::model::index_uni(k));
          current_statement__ = 18;
          stan::model::assign(md,
            ((stan::math::multiply(d,
                stan::math::to_vector(
                  stan::model::rvalue(components, "components",
                    stan::model::index_omni(), stan::model::index_uni(i),
                    stan::model::index_uni(k)))) -
            stan::math::multiply(d,
              stan::math::to_vector(
                stan::model::rvalue(components, "components",
                  stan::model::index_omni(), stan::model::index_uni(i),
                  stan::model::index_uni(1))))) +
            stan::model::rvalue(sw, "sw", stan::model::index_uni(i),
              stan::model::index_uni(k))), "assigning variable md",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 19;
          stan::model::assign(r_delta,
            stan::model::rvalue(delta, "delta", stan::model::index_uni(i),
              stan::model::index_uni(k)), "assigning variable r_delta",
            stan::model::index_uni(i), stan::model::index_uni(k));
        }
        current_statement__ = 28;
        for (int k =
               (stan::model::rvalue(n_arms, "n_arms",
                  stan::model::index_uni(i)) + 1); k <=
             stan::math::max(n_arms); ++k) {
          current_statement__ = 22;
          stan::model::assign(w, 0, "assigning variable w",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 23;
          stan::model::assign(sw, 0, "assigning variable sw",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 24;
          stan::model::assign(md, 0, "assigning variable md",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 25;
          stan::model::assign(taud, 0, "assigning variable taud",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 26;
          stan::model::assign(r_delta, 0, "assigning variable r_delta",
            stan::model::index_uni(i), stan::model::index_uni(k));
        }
      }
      {
        current_statement__ = 31;
        stan::math::validate_non_negative_index("p", "n_trials", n_trials);
        current_statement__ = 32;
        stan::math::validate_non_negative_index("p", "max(n_arms)",
          stan::math::max(n_arms));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> p =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::max(
                                                             n_arms),
              DUMMY_VAR__));
        current_statement__ = 34;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(sdbt, 0, 10));
        current_statement__ = 45;
        for (int i = 1; i <= n_trials; ++i) {
          current_statement__ = 35;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_uni(i)), 0, 1000));
          current_statement__ = 36;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(delta, "delta",
                             stan::model::index_uni(i)), 0, 1000));
          current_statement__ = 39;
          for (int k = 2; k <=
               stan::model::rvalue(n_arms, "n_arms",
                 stan::model::index_uni(i)); ++k) {
            current_statement__ = 37;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(delta, "delta",
                               stan::model::index_uni(i),
                               stan::model::index_uni(k)),
                             stan::model::rvalue(md, "md",
                               stan::model::index_uni(i),
                               stan::model::index_uni(k)),
                             stan::model::rvalue(taud, "taud",
                               stan::model::index_uni(i),
                               stan::model::index_uni(k))));
          }
          current_statement__ = 43;
          for (int k = 1; k <=
               stan::model::rvalue(n_arms, "n_arms",
                 stan::model::index_uni(i)); ++k) {
            current_statement__ = 40;
            stan::model::assign(p,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
              stan::model::rvalue(r_delta, "r_delta",
                stan::model::index_uni(i), stan::model::index_uni(k))),
              "assigning variable p", stan::model::index_uni(i),
              stan::model::index_uni(k));
            current_statement__ = 41;
            lp_accum__.add(stan::math::binomial_logit_lpmf<propto__>(
                             stan::model::rvalue(r, "r",
                               stan::model::index_uni(i),
                               stan::model::index_uni(k)),
                             stan::model::rvalue(n, "n",
                               stan::model::index_uni(i),
                               stan::model::index_uni(k)),
                             stan::model::rvalue(p, "p",
                               stan::model::index_uni(i),
                               stan::model::index_uni(k))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_binary_re_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(n_trials,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials);
      Eigen::Matrix<double,1,-1> d =
        Eigen::Matrix<double,1,-1>::Constant(n_components,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      d = in__.template read<
            Eigen::Matrix<local_scalar_t__,1,-1>>(n_components);
      double sdbt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sdbt = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 10, lp__);
      std::vector<Eigen::Matrix<double,-1,1>> delta =
        std::vector<Eigen::Matrix<double,-1,1>>(n_trials,
          Eigen::Matrix<double,-1,1>::Constant(delta_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      delta = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(n_trials,
                delta_2dim__);
      std::vector<Eigen::Matrix<double,-1,1>> w =
        std::vector<Eigen::Matrix<double,-1,1>>(n_trials,
          Eigen::Matrix<double,-1,1>::Constant(w_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> sw =
        std::vector<Eigen::Matrix<double,-1,1>>(n_trials,
          Eigen::Matrix<double,-1,1>::Constant(sw_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> md =
        std::vector<Eigen::Matrix<double,-1,1>>(n_trials,
          Eigen::Matrix<double,-1,1>::Constant(md_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> taud =
        std::vector<Eigen::Matrix<double,-1,1>>(n_trials,
          Eigen::Matrix<double,-1,1>::Constant(taud_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> r_delta =
        std::vector<Eigen::Matrix<double,-1,1>>(n_trials,
          Eigen::Matrix<double,-1,1>::Constant(r_delta_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(mu);
      out__.write(d);
      out__.write(sdbt);
      for (int sym1__ = 1; sym1__ <= delta_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          out__.write(delta[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 30;
      for (int i = 1; i <= n_trials; ++i) {
        current_statement__ = 10;
        stan::model::assign(w, 0, "assigning variable w",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 11;
        stan::model::assign(r_delta, 0, "assigning variable r_delta",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 12;
        stan::model::assign(sw, 0, "assigning variable sw",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 13;
        stan::model::assign(md, 0, "assigning variable md",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 14;
        stan::model::assign(taud, 0, "assigning variable taud",
          stan::model::index_uni(i), stan::model::index_uni(1));
        current_statement__ = 21;
        for (int k = 2; k <=
             stan::model::rvalue(n_arms, "n_arms", stan::model::index_uni(i)); ++k) {
          current_statement__ = 15;
          stan::model::assign(taud, (((sdbt * 2) * (k - 1)) / k),
            "assigning variable taud", stan::model::index_uni(i),
            stan::model::index_uni(k));
          current_statement__ = 16;
          stan::model::assign(w,
            ((stan::model::rvalue(delta, "delta", stan::model::index_uni(i),
                stan::model::index_uni(k)) -
            stan::math::multiply(d,
              stan::math::to_vector(
                stan::model::rvalue(components, "components",
                  stan::model::index_omni(), stan::model::index_uni(i),
                  stan::model::index_uni(k))))) +
            stan::math::multiply(d,
              stan::math::to_vector(
                stan::model::rvalue(components, "components",
                  stan::model::index_omni(), stan::model::index_uni(i),
                  stan::model::index_uni(1))))), "assigning variable w",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 17;
          stan::model::assign(sw,
            (stan::math::sum(
               stan::model::rvalue(w, "w", stan::model::index_uni(i),
                 stan::model::index_min_max(1, (k - 1)))) / (k - 1)),
            "assigning variable sw", stan::model::index_uni(i),
            stan::model::index_uni(k));
          current_statement__ = 18;
          stan::model::assign(md,
            ((stan::math::multiply(d,
                stan::math::to_vector(
                  stan::model::rvalue(components, "components",
                    stan::model::index_omni(), stan::model::index_uni(i),
                    stan::model::index_uni(k)))) -
            stan::math::multiply(d,
              stan::math::to_vector(
                stan::model::rvalue(components, "components",
                  stan::model::index_omni(), stan::model::index_uni(i),
                  stan::model::index_uni(1))))) +
            stan::model::rvalue(sw, "sw", stan::model::index_uni(i),
              stan::model::index_uni(k))), "assigning variable md",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 19;
          stan::model::assign(r_delta,
            stan::model::rvalue(delta, "delta", stan::model::index_uni(i),
              stan::model::index_uni(k)), "assigning variable r_delta",
            stan::model::index_uni(i), stan::model::index_uni(k));
        }
        current_statement__ = 28;
        for (int k =
               (stan::model::rvalue(n_arms, "n_arms",
                  stan::model::index_uni(i)) + 1); k <=
             stan::math::max(n_arms); ++k) {
          current_statement__ = 22;
          stan::model::assign(w, 0, "assigning variable w",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 23;
          stan::model::assign(sw, 0, "assigning variable sw",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 24;
          stan::model::assign(md, 0, "assigning variable md",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 25;
          stan::model::assign(taud, 0, "assigning variable taud",
            stan::model::index_uni(i), stan::model::index_uni(k));
          current_statement__ = 26;
          stan::model::assign(r_delta, 0, "assigning variable r_delta",
            stan::model::index_uni(i), stan::model::index_uni(k));
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= w_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            out__.write(w[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= sw_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            out__.write(sw[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= md_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            out__.write(md[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= taud_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            out__.write(taud[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= r_delta_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            out__.write(r_delta[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_trials, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials),
        "assigning variable mu");
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,1,-1> d =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(n_components,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(d,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(n_components),
        "assigning variable d");
      out__.write(d);
      local_scalar_t__ sdbt = DUMMY_VAR__;
      current_statement__ = 3;
      sdbt = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 10, sdbt);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delta_2dim__,
            DUMMY_VAR__));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= delta_2dim__; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          current_statement__ = 4;
          stan::model::assign(delta, in__.read<local_scalar_t__>(),
            "assigning variable delta", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(n_trials)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "d", "double",
        std::vector<size_t>{static_cast<size_t>(n_components)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sdbt", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "delta", "double",
        std::vector<size_t>{static_cast<size_t>(n_trials),
          static_cast<size_t>(delta_2dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_trials, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_trials; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,1,-1> d =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(n_components,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> d_flat__;
        current_statement__ = 2;
        d_flat__ = context__.vals_r("d");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_components; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(d, d_flat__[(pos__ - 1)],
            "assigning variable d", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(d);
      local_scalar_t__ sdbt = DUMMY_VAR__;
      current_statement__ = 3;
      sdbt = context__.vals_r("sdbt")[(1 - 1)];
      out__.write_free_lub(0, 10, sdbt);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_trials,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delta_2dim__,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 4;
        delta_flat__ = context__.vals_r("delta");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= delta_2dim__; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(delta, delta_flat__[(pos__ - 1)],
              "assigning variable delta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "d", "sdbt", "delta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"w", "sw", "md", "taud", "r_delta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_trials)},
                std::vector<size_t>{static_cast<size_t>(n_components)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(n_trials),
                  static_cast<size_t>(delta_2dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_trials),
               static_cast<size_t>(w_2dim__)},
             std::vector<size_t>{static_cast<size_t>(n_trials),
               static_cast<size_t>(sw_2dim__)},
             std::vector<size_t>{static_cast<size_t>(n_trials),
               static_cast<size_t>(md_2dim__)},
             std::vector<size_t>{static_cast<size_t>(n_trials),
               static_cast<size_t>(taud_2dim__)},
             std::vector<size_t>{static_cast<size_t>(n_trials),
               static_cast<size_t>(r_delta_2dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_trials; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_components; ++sym1__) {
      param_names__.emplace_back(std::string() + "d" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sdbt");
    for (int sym1__ = 1; sym1__ <= delta_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= w_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "w" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= sw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "sw" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= md_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "md" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= taud_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "taud" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= r_delta_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "r_delta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_trials; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_components; ++sym1__) {
      param_names__.emplace_back(std::string() + "d" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sdbt");
    for (int sym1__ = 1; sym1__ <= delta_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= w_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "w" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= sw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "sw" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= md_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "md" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= taud_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "taud" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= r_delta_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_trials; ++sym2__) {
          param_names__.emplace_back(std::string() + "r_delta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_trials) + "},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_components) + "},\"block\":\"parameters\"},{\"name\":\"sdbt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(delta_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(w_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(sw_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"md\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(md_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"taud\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(taud_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"r_delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_delta_2dim__) + "}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_trials) + "},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_components) + "},\"block\":\"parameters\"},{\"name\":\"sdbt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(delta_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(w_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(sw_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"md\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(md_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"taud\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(taud_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"r_delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_trials) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_delta_2dim__) + "}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((n_trials + n_components) + 1) + (n_trials
      * delta_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      ((((((n_trials * w_2dim__) + (n_trials * sw_2dim__)) + (n_trials *
      md_2dim__)) + (n_trials * taud_2dim__)) + (n_trials * r_delta_2dim__)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((n_trials + n_components) + 1) + (n_trials
      * delta_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      ((((((n_trials * w_2dim__) + (n_trials * sw_2dim__)) + (n_trials *
      md_2dim__)) + (n_trials * taud_2dim__)) + (n_trials * r_delta_2dim__)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_binary_re_namespace::model_binary_re;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_binary_re_namespace::profiles__;
}
#endif
#endif
